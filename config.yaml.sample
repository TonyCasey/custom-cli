# Custom CLI Configuration Sample
# Copy this file to config.yaml and customize for your projects
#
# Key Features:
# - Dependency-driven startup order (services wait for dependencies to be healthy)
# - Variable substitution with ${VAR} syntax
# - Comments to document service relationships
# - Clean, readable YAML structure

# Individual service definitions
services:
  # React App Example
  react-app:
    port: 3000
    directory: ${REPOS_DIR}/my-react-app
    command: npm start
    timeout: 60
    healthUrl: http://localhost:3000
    displayName: React Application
    dependencies: []

  # Vite App Example
  vite-app:
    port: 5173
    directory: ${REPOS_DIR}/my-vite-app
    command: npm run dev
    timeout: 45
    healthUrl: http://localhost:5173
    displayName: Vite Development Server
    dependencies: []

  # Next.js App Example
  nextjs-app:
    port: 3000
    directory: ${REPOS_DIR}/my-nextjs-app
    command: npm run dev
    timeout: 60
    healthUrl: http://localhost:3000
    displayName: Next.js Application
    dependencies: []

  # Express API Example
  express-api:
    port: 8080
    directory: ${REPOS_DIR}/my-express-api
    command: npm run dev
    timeout: 30
    healthUrl: http://localhost:8080/api/health
    displayName: Express API Server
    dependencies: []

  # Vue.js App Example
  vue-app:
    port: 8080
    directory: ${REPOS_DIR}/my-vue-app
    command: npm run serve
    timeout: 45
    healthUrl: http://localhost:8080
    displayName: Vue.js Application
    dependencies: []

  # Database Example
  database:
    port: 5432
    directory: ${REPOS_DIR}/my-database
    command: npm run start:local
    timeout: 30
    healthUrl: ""  # Uses port-based health check
    displayName: Local Database
    dependencies: []

  # API Server with Database Dependency
  api-server:
    port: 3001
    directory: ${REPOS_DIR}/my-api-server
    command: npm run dev
    timeout: 30
    healthUrl: http://localhost:3001/health
    displayName: API Server
    dependencies:
      - database  # Waits for database to be healthy first

  # Frontend App with API Dependency
  frontend-app:
    port: 3000
    directory: ${REPOS_DIR}/my-frontend-app
    command: npm start
    timeout: 60
    healthUrl: http://localhost:3000
    displayName: Frontend Application
    dependencies:
      - api-server  # Waits for API to be healthy first

# Composite service environments
composites:
  # Frontend-only environment
  frontend:
    services:
      - react-app
    displayName: Frontend Development
    description: React application only

  # Full-stack environment with dependencies
  fullstack:
    services:
      - database
      - api-server
      - frontend-app
    displayName: Complete Development Environment
    description: Database + API + Frontend (starts in dependency order)

  # Multi-app environment
  multi-frontend:
    services:
      - react-app
      - vue-app
      - vite-app
    displayName: Multi-Frontend Testing
    description: Multiple frontend frameworks running simultaneously

  # E-commerce example
  ecommerce:
    services:
      - database
      - express-api
      - vue-app
    displayName: E-commerce Stack
    description: Database + API + Vue.js storefront

# Global configuration
global:
  # Directory paths
  reposDir: ${HOME}/Projects  # Change this to your projects directory
  logsDir: ${REPOS_DIR}/custom-cli/.logs

  # CLI configuration
  cliName: my-custom-cli  # Change this to your preferred CLI name
  cliExecutable: bin/custom-cli

  # Default timeouts
  timeoutDefault: 30
  timeoutLong: 45
  timeoutDashboard: 60

  # Version information
  version: 1.0.0
  versionName: My Custom CLI
  buildDate: 2025-09-24
  phase: "Release 1.0: My Development Environment"
  architecture: Configuration-Driven

# Process cleanup patterns (for stopping services)
processPatterns:
  react: react-scripts.*start
  vite: vite.*dev
  nextjs: next.*dev
  express: express.*dev node.*server
  vue: vue.*serve
  database: postgres mysql mongo
  api: api.*nodemon api.*ts-node
  frontend: webpack-dev-server

# UI configuration
ui:
  colors:
    green: '\033[0;32m'
    yellow: '\033[1;33m'
    red: '\033[0;31m'
    blue: '\033[0;34m'
    purple: '\033[0;35m'
    reset: '\033[0m'

  icons:
    database: üóÑÔ∏è
    api: üîå
    webapp: üåê
    mobile: üì±
    success: ‚úÖ
    warning: ‚ö†Ô∏è
    error: ‚ùå
    info: ‚Ñπ